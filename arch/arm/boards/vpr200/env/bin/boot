#!/bin/sh
# 
# vpr200 boot -extends standard boot with buzzer feedback and button
# state checking so that user can force booting off SD card without
# having to change boot src pins.
# 

# Check for button combo for SD forced boot
button -m 0x18

if [ x$? = x0 ]; then
	echo "Forcing boot from SD card"
	# force barebox_loc to mmc before including /env/config 
	# so that nor is rw and the xxx_loc are set up
	barebox_loc=mmc

	#led to yellow
	led diag 6

	#
	. /env/config
	
	buzzer -f 1760 -d 150 && buzzer -f 10 -d 150 && buzzer -f 2000 -d 300

else
	#
	. /env/config

	buzzer -f 440 -d 25 && buzzer -f 1760 -d 25
fi

if [ x$ip = xdhcp ]; then
	bootargs="$bootargs ip=dhcp"
elif [ x$ip = xnone ]; then
	bootargs="$bootargs ip=none"
else
	bootargs="$bootargs ip=$eth0.ipaddr:$eth0.serverip:$eth0.gateway:$eth0.netmask::eth0:"
fi


if [ x$rootfs_loc != xnet ]; then
	if [ x$rootfs_loc = xnand ]; then
		rootfs_mtdblock=$rootfs_mtdblock_nand
	elif [ x$rootfs_loc = xnor ]; then
		rootfs_mtdblock=$rootfs_mtdblock_nor
	else
		rootfs_mtdblock=$rootfs_mmc_part
	fi

	if [ x$rootfs_type = xubifs ]; then
		bootargs="$bootargs ubi.mtd=$rootfs_mtdblock root=ubi0:$rootfs"
	elif [ x$rootfs_loc = xmmc ]; then
		bootargs="$bootargs rootwait root=/dev/mmcblk0p$rootfs_mmc_part"
	else
		bootargs="$bootargs root=/dev/mtdblock$rootfs_mtdblock"
	fi

	bootargs="$bootargs rootfstype=$rootfs_type"
else
	bootargs="$bootargs root=/dev/nfs nfsroot=$eth0.serverip:$nfsroot,v3,tcp noinitrd"
fi

bootargs="$bootargs mtdparts=physmap-flash.0:$nor_parts;mxc_nand:$nand_parts $ubi_extra_parts"

#
# turn off the LCD before booting. We can't keep the image up
# because the IPU requires DMA transfer and the kernel requires that all DMA
# be stopped before boot
#
fb0.enable=0
vprbacklight -s 0

# Check for button combo to boot debug mode
button -m 0x0d
if [ x$? = x0 ]; then
	bootargs="$bootargs $debugargs"
fi

if [ x$kernel_loc = xnet ]; then
	# Need some kind of address set, so dhcp unless addr is static
	# (even if $ip is "none")
	if [ x$ip != x ]; then
		dhcp
	fi
	kdev=/image
	tftp $kernelimage $kdev || exit 1
elif [ x$kernel_loc = xnor ]; then
	kdev="/dev/nor0.kernel"
elif [ x$kernel_loc = xmmc ]; then
	kdev="/dev/disk0.kernel"
else
	kdev="/dev/nand0.kernel.bb"
fi

bootm $bootm_opt $kdev

# if bootm failed, give an triple error buzz
if [ x$? != x0 ];then
	buzzer -f 220 -d 150 && buzzer -f 20 -d 50 
	buzzer -f 220 -d 150 && buzzer -f 20 -d 50 
	buzzer -f 220 -d 150 && buzzer -f 20 -d 50 
fi
